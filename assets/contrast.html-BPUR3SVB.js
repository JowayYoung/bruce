import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as d,a as o,o as c}from"./app-9HkQzh9v.js";const r={};function n(a,t){return c(),d("div",null,t[0]||(t[0]=[o('<h2 id="传统构建方案" tabindex="-1"><a class="header-anchor" href="#传统构建方案"><span>传统构建方案</span></a></h2><p>基于<code>webpack</code>构建的<code>JS/React</code>应用，代码分为<strong>构建代码</strong>和<strong>业务代码</strong>，应用目录和配置文件的搭建方案传统且多人使用。整个应用除去业务代码，构建代码的文件较多，配置比较分散，很难集中管理，无法做到开箱即用，通用性较低，前期搭建的时间成本很重，构建时要依赖应用存在的模块才能驱动。对于迭代构建功能和事务交接，都会花费较多的时间成本去查找代码和熟悉构建逻辑。</p><h2 id="yangzw-bruce-app" tabindex="-1"><a class="header-anchor" href="#yangzw-bruce-app"><span>@yangzw/bruce-app</span></a></h2><p>基于<code>@yangzw/bruce-app</code>构建的<code>JS/React</code>应用，代码只有<strong>业务代码</strong>，构建代码集中在一起做成一个<code>npm模块</code>并安装到全局环境中。在保障路径索引有效的情况下，通过命令调用构建代码驱动应用，实现构建代码和业务代码完全分离。开发时无需关注如何写好构建代码、使用何种工具扩展构建功能，只需专注编写业务代码。整个应用只存在业务代码，可以通过配置文件修改默认配置，大大缩减前期的准备工作，保证应用的<strong>简洁性</strong>、<strong>独立性</strong>、<strong>高效性</strong>和<strong>维护性</strong>。省去前期搭建的时间成本，开箱即用，使开发人员可以集中精力写好业务代码。</p><h2 id="比较" tabindex="-1"><a class="header-anchor" href="#比较"><span>比较</span></a></h2><table><thead><tr><th style="text-align:center;">对比</th><th>传统构建方案</th><th>@yangzw/bruce-app</th></tr></thead><tbody><tr><td style="text-align:center;">配置文件</td><td><code>build目录</code>、<code>config目录</code><br><code>.browserslistrc</code><br><code>.postcssrc</code>、<code>.babelrc</code><br><code>.stylelintignore</code>、<code>.stylelintrc</code><br><code>.eslintignore</code>、<code>.eslintrc</code></td><td><code>brucerc.js</code></td></tr><tr><td style="text-align:center;">业务文件</td><td><code>src目录</code></td><td><code>src目录</code></td></tr><tr><td style="text-align:center;">基础文件</td><td><code>package.json</code>、<code>readme.md</code>、<code>tsconfig.json</code></td><td><code>package.json</code>、<code>readme.md</code>、<code>tsconfig.json</code></td></tr><tr><td style="text-align:center;">依赖模块</td><td><strong>Webpack技术栈</strong>(<code>构建</code>)、<strong>React技术栈</strong>(<code>业务</code>)</td><td><strong>React技术栈</strong>(<code>业务</code>)</td></tr><tr><td style="text-align:center;">依赖安装</td><td>安装时间较长，同时安装构建和业务代码的依赖模块<br>每次创建项目都要安装一次</td><td>安装时间较短，只需安装业务代码的依赖模块<br>只需全局安装一次</td></tr><tr><td style="text-align:center;">开发准备</td><td>编写<code>webpack</code>和其它工具搭配的构建代码</td><td><strong>开箱即用</strong></td></tr><tr><td style="text-align:center;">全局使用</td><td>不可行</td><td>可行</td></tr><tr><td style="text-align:center;">构建复用</td><td>创建文件夹，复制粘贴构建代码，修改配置文件等</td><td>执行命令，创建应用然后构建应用</td></tr><tr><td style="text-align:center;">新手构建</td><td>需要了解构建代码逻辑和配置文件</td><td>执行命令</td></tr><tr><td style="text-align:center;">后期扩展</td><td>在原有构建代码中增删改构建功能</td><td>通过配置文件增删改构建功能</td></tr><tr><td style="text-align:center;">配置管理</td><td>分散在不同构建配置文件中，需要修改不同工具的配置文件</td><td>集成构建的基础配置，可以通过配置文件覆盖</td></tr></tbody></table>',6)]))}const g=e(r,[["render",n]]),i=JSON.parse('{"path":"/app/contrast.html","title":"对比","lang":"zh-CN","frontmatter":{"title":"对比","icon":"scale-balanced","order":5},"git":{"createdTime":1747340459000,"updatedTime":1747340459000,"contributors":[{"name":"JowayYoung","username":"JowayYoung","email":"young.joway@outlook.com","commits":1,"url":"https://github.com/JowayYoung"}]},"readingTime":{"minutes":2.3,"words":691},"filePathRelative":"app/contrast.md"}');export{g as comp,i as data};
