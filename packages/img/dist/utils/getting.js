const ls={type:/^(format|size|volume)$/},ho={type:(s="")=>ls.type.test(s)?s:"format"},aa={color:/^#([0-9A-F]{6}|[0-9A-F]{3})|rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)|rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)|hsl\(\s*(\d{1,3})\s*,\s*(\d{1,3})%\s*,\s*(\d{1,3})%\s*\)|hsla\(\s*(\d{1,3})\s*,\s*(\d{1,3})%\s*,\s*(\d{1,3})%\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)$/i,left:/^(0|([1-9]\d*))$/,size:/^([1-9]\d*)$/,text:/^[\w\s\u4e00-\u9fa5-]{1,50}$/,top:/^(0|([1-9]\d*))$/},mi={compress:"#compress-dist#",group:"#group-dist#",mark:"#mark-dist#",transform:"#transform-dist#"},fs={blur:/^[1-9]\d{0,2}$|^0$|^1000$/,extract:/^(0|[1-9]\d*),(0|[1-9]\d*),([1-9]\d*),([1-9]\d*)$/,flag:/^true$/,format:/^(gif|jpg|png|webp)$/,negate:/^noalpha$/,normalise:/^([1-9]|[1-9]\d),([1-9]|[1-9]\d)$/,resize:/^([1-9]\d*),([1-9]\d*)(,(cover|contain|fill|inside|outside))?$/,rotate:/^(-?\d+)(,(#([0-9A-F]{6}|[0-9A-F]{3})|rgb\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*\)|rgba\(\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(\d{1,3})\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\)|hsl\(\s*(\d{1,3})\s*,\s*(\d{1,3})%\s*,\s*(\d{1,3})%\s*\)|hsla\(\s*(\d{1,3})\s*,\s*(\d{1,3})%\s*,\s*(\d{1,3})%\s*,\s*(0(\.\d+)?|1(\.0+)?)\s*\))?)?$/i,sharpen:/^([1-9]|10),([1-9]\d{0,5}|0),([1-9]\d{0,5}|0)$/},xo={blur:(s="")=>fs.blur.test(s)?+s:0,extract(s=""){if(fs.extract.test(s)){const[t=0,e=0,r,a]=s.split(",").map((s=>+s));return{height:a,left:t,top:e,width:r}}return!1},flip:(s="")=>fs.flag.test(s),flop:(s="")=>fs.flag.test(s),grayscale:(s="")=>fs.flag.test(s),negate:(s="")=>fs.negate.test(s)?{alpha:!1}:fs.flag.test(s),normalise(s=""){if(fs.normalise.test(s)){let[t=1,e=99]=s.split(",").map((s=>+s));return t>e&&([t,e]=[e,t]),{lower:t,upper:e}}return fs.flag.test(s)},resize(s=""){if(fs.resize.test(s)){const[t,e,r="cover"]=s.split(",");return{fit:r,height:0==+e?null:+e,width:0==+t?null:+e}}return!1},rotate(s=""){if(fs.rotate.test(s)){const[t,e="#000"]=s.split(",");return[+t,{background:e}]}return!1},sharpen(s=""){if(fs.sharpen.test(s)){const[t=1,e=1,r=2]=s.split(",").map((s=>+s));return{m1:e,m2:r,sigma:t}}return fs.flag.test(s)},toFormat:(s="")=>fs.format.test(s)?s:""};export{ls as GROUP_REGEXP,ho as GROUP_TEST,aa as MARK_REGEXP,mi as OUTPUT_DIR,fs as TRANSFORM_REGEXP,xo as TRANSFORM_TEST};